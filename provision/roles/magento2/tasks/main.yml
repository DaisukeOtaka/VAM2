---
# Install requirements
- name: install php requirement packages for Magento2
  yum: name={{ item }} state=present
  with_items:
    - mod_php70u
    - php70u-pdo
    - php70u-mysqlnd
    - php70u-opcache
    - php70u-xml
    - php70u-mcrypt
    - php70u-gd
    - php70u-devel
    - php70u-intl
    - php70u-mbstring
    - php70u-json
    - php70u-iconv

- name: install others requirement packages for Magento2 installation
  yum: name={{ item }} state=present
  with_items:
    - curl
    - ImageMagick

- name: set PHP memory limit 2G
  lineinfile:
    dest: /etc/php.ini
    backrefs: yes
    regexp: '^memory_limit'
    line: 'memory_limit = 2G'

- name: Change httpd.conf
  copy: src=httpd.conf.2.4.6 dest=/etc/httpd/conf/httpd.conf owner=root group=root mode=0644

# Prepare magento2 download
- name: install composer globally
  shell: curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
  args:
    creates: /usr/local/bin/composer

- name: composer use hirak/prestissimo
  shell: composer global require "hirak/prestissimo:^0.3"
  become: false

- name: composer use packagist.jp(https)
  shell: composer config -g repositories.packagist composer https://packagist.jp
  become: false

- name: set composer auth.json
  template: src=auth.json.j2 dest=/home/vagrant/.config/composer/auth.json owner=vagrant group=vagrant mode=0600
  become: false

- name: add user vagrant to apache group
  user: name=vagrant append=yes groups="apache"

- name: add user apache to vagrant group
  user: name=apache append=yes groups="vagrant"

- name: chown docroot
  file: path=/var/www/html/ state=directory owner=apache group=apache

- name: create Magento2 dir
  file: path=/var/www/html/magento2 state=directory owner=vagrant group=vagrant

# Install magento2 via composer
- name: install Magento2
  composer:
    command: "create-project"
    arguments: "--repository-url=https://repo.magento.com/ magento/project-community-edition /var/www/html/magento2 {{ magento_version }}"
    working_dir: "/var/www/html/magento2"
  become: false

- name: set permission to app directory
  shell: find /var/www/html/ -type d -exec chmod 775 {} \;

- name: set permission to app files
  shell: find /var/www/html/ -type f -exec chmod 664 {} \;

- name: add execute permission to app/bin directory
  shell: chmod 775 /var/www/html/magento2/bin/magento

- name: set read log permission for debug
  shell: chmod 755 /var/log/httpd/

- name: set magento-cli PATH to .bash_profile
  lineinfile: dest=/home/vagrant/.bash_profile line="export PATH=$PATH:/var/www/html/magento2/bin"

# Create Magento2 db
- name: install mysql-python package for ansible configuration
  yum: name=MySQL-python state=present

- name: get default mysql password (5.7)
  shell: "cat /var/log/mysqld.log | grep -oP '(?<=A temporary password is generated for root@localhost: ).*'"
  register: mysql_root_pass

- name: set ~/.my.cnf with empty pass (5.7)
  template:
    src: .my.cnf.j2
    dest: /home/vagrant/.my.cnf
    mode: 0600
  become: false

- name: set default mysql password to ~/.my.cnf (5.7)
  lineinfile:
    dest: /home/vagrant/.my.cnf
    backrefs: yes
    regexp: '^password='
    line: 'password={{ mysql_root_pass.stdout }}'
  become: false

- name: change root password
  shell: mysql --defaults-file=/home/vagrant/.my.cnf -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Passw0rd!Passw0rd!'"

- name: change default mysql password to ~/.my.cnf (5.7)
  lineinfile:
    dest: /home/vagrant/.my.cnf
    backrefs: yes
    regexp: '^password='
    line: 'password=Passw0rd!Passw0rd!'
  become: false

- name: create app database
  mysql_db:
    name: "{{ db_name }}"
    collation: utf8_general_ci
    encoding: utf8
    state: present
  become: false

- name: create app database user
  mysql_user:
    name: "{{ db_user }}"
    password: "{{ db_password }}"
    priv: "{{ db_name }}.*:ALL"
    host: localhost
    state: present
  become: false

# Configure setting to httpd
- name: restart httpd
  service: name=httpd state=restarted

- name: wait for httpd restarted
  wait_for: port=80 delay=30
